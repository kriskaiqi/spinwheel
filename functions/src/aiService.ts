import { GoogleGenerativeAI } from '@google/generative-ai';

/**
 * Generates creative entries for a spin wheel using Google Generative AI
 * @param theme - The theme for the wheel entries
 * @param count - Number of entries to generate (1-20)
 * @returns Promise<string[]> - Array of generated entries
 */
export async function generateEntries(theme: string, count: number): Promise<string[]> {
  try {
    // TODO: Set up actual API key environment variable
    // const apiKey = process.env.GOOGLE_AI_API_KEY;
    // if (!apiKey) {
    //   throw new Error('Google AI API key not configured');
    // }
    
    // For now, using a placeholder - replace with actual API key setup
    const apiKey = 'YOUR_API_KEY_HERE'; // TODO: Replace with process.env.GOOGLE_AI_API_KEY
    
    const genAI = new GoogleGenerativeAI(apiKey);
    const model = genAI.getGenerativeModel({ model: 'gemini-pro' });

    const prompt = `Generate ${count} creative, concise entries for a spin wheel about ${theme}. Return JSON array.`;
    
    const result = await model.generateContent(prompt);
    const response = await result.response;
    const text = response.text();

    // Parse JSON safely
    let entries: string[];
    try {
      entries = JSON.parse(text);
    } catch {
      // If direct parsing fails, try to extract JSON from the response
      const jsonMatch = text.match(/\[.*\]/s);
      if (jsonMatch) {
        entries = JSON.parse(jsonMatch[0]);
      } else {
        throw new Error('Failed to parse JSON response from AI service');
      }
    }

    // Validate that we got an array of strings
    if (!Array.isArray(entries)) {
      throw new Error('AI service did not return an array');
    }

    if (entries.length === 0) {
      throw new Error('AI service returned empty array');
    }

    // Ensure all entries are strings and not empty
    const validEntries = entries
      .filter(entry => typeof entry === 'string' && entry.trim().length > 0)
      .map(entry => entry.trim())
      .slice(0, count); // Ensure we don't exceed requested count

    if (validEntries.length === 0) {
      throw new Error('No valid entries generated by AI service');
    }

    return validEntries;
  } catch (error) {
    console.error('Error in generateEntries:', error);
    throw new Error(`Failed to generate entries: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}
